{"version":3,"sources":["GameTile.js","GameBoard.js","GameControls.js","App.js","index.js"],"names":["GameTile","isActiveClass","this","props","active","react_default","a","createElement","className","concat","data-x","x","data-y","y","data-direction","direction","Component","GameBoard","_this","cols","_","range","rows","tiles","flatten","map","row","col","src_GameTile","locationX","locationY","GameControls","type","defaultValue","placeInput","onKeyUp","placeInputFn","onClick","placeFn","moveFn","turnLeftFn","turnRightFn","reportFn","placeholder","batchCommandsFn","batchFn","BOARD_DIMENSION","ROBOT_DIRECTIONS","n","s","w","e","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","location","batchCommandInput","place","bind","assertThisInitialized","executePlace","placeInputUpdate","move","turnLeft","turnRight","report","evt","target","value","_this2","split","forEach","line","toLowerCase","indexOf","substr","console","log","message","toUpperCase","alert","input","length","parseInt","includes","setState","src_GameBoard","src_GameControls","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.3e128f9c.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass GameTile extends Component {\n  render() {\n    var isActiveClass = this.props.active === true ? 'is-active': '';\n    return (\n      <div \n        className={`tile ${isActiveClass}`}\n        data-x={this.props.x}\n        data-y={this.props.y}\n        data-direction={this.props.direction}\n      />\n    );\n  }\n}\n\nexport default GameTile;\n","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport GameTile from './GameTile';\n\nclass GameBoard extends Component {\n  render() {\n    var cols = _.range(0, this.props.cols);\n    var rows = _.range(this.props.rows - 1, -1);\n\n    //build board\n    var tiles = _.flatten(rows.map((row) => {\n      return cols.map((col) => {\n        return (<GameTile\n          x={col}\n          y={row}\n          direction={this.props.direction}\n          active={col === this.props.locationX && row === this.props.locationY}\n        />);\n      });\n    }));\n\n    return (\n      <div className={`board col-${this.props.cols}`}>{tiles}</div>\n    );\n  }\n}\n\nexport default GameBoard;\n","import React, { Component } from 'react';\n\nclass GameControls extends Component {\n  render() {\n    return (\n      <div className=\"controls\">\n        <input type=\"text\" defaultValue={this.props.placeInput} onKeyUp={this.props.placeInputFn} />\n        <button onClick={this.props.placeFn}>Place</button>\n        <button onClick={this.props.moveFn}>Move</button>\n        <button onClick={this.props.turnLeftFn}>Left</button>\n        <button onClick={this.props.turnRightFn}>Right</button>\n        <button onClick={this.props.reportFn}>Report</button><br />\n        <textarea placeholder=\"Batch Commands\" onKeyUp={this.props.batchCommandsFn}></textarea>\n        <button onClick={this.props.batchFn}>Execute</button>\n      </div>\n    );\n  }\n}\n\nexport default GameControls;\n","import React, { Component } from 'react';\nimport GameBoard from './GameBoard';\nimport GameControls from './GameControls';\nimport _ from 'lodash';\nimport './App.css';\n\nvar BOARD_DIMENSION = {\n  rows: 5,\n  cols: 5\n};\nvar ROBOT_DIRECTIONS = {\n  n: 'north',\n  s: 'south',\n  w: 'west',\n  e: 'east'\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      location: {\n        x: 0,\n        y: 0\n      },\n      direction: ROBOT_DIRECTIONS.n\n    }\n    this.placeInput = '0,0,north';\n    this.batchCommandInput = '';\n\n    this.place = this.place.bind(this);\n    this.executePlace = this.executePlace.bind(this);\n    this.placeInputUpdate = this.placeInputUpdate.bind(this);\n    this.batchCommandsFn = this.batchCommandsFn.bind(this);\n    this.batchFn = this.batchFn.bind(this);\n    this.move = this.move.bind(this);\n    this.turnLeft = this.turnLeft.bind(this);\n    this.turnRight = this.turnRight.bind(this);\n    this.report = this.report.bind(this);\n  }\n\n  batchCommandsFn(evt) {\n    this.batchCommandInput = evt.target.value;\n  }\n\n  batchFn() {\n    var input = this.batchCommandInput.split(\"\\n\");\n    var state;\n\n    input.forEach((line) => {\n      line = line.toLowerCase();\n      if (line.indexOf(',') > 0 && line.indexOf('place ') === 0) {\n        line = line.substr(6);\n        state = this.executePlace(line);\n      } else {\n        switch(line) {\n          case 'move':\n            state = this.move(state);\n            break;\n          case 'left':\n            state = this.turnLeft(state);\n            break;\n          case 'right':\n            state = this.turnRight(state);\n            break;\n          case 'report':\n            state = this.report(state);\n            break;\n        }\n      }\n      console.log(state);\n    });\n  }\n\n  report(state) {\n    if (!state.location) {\n      state = this.state;\n    }\n    var message = state.location.x + ',' + state.location.y + ',' + state.direction.toUpperCase();\n    alert(message);\n  }\n\n  placeInputUpdate(evt) {\n    this.placeInput = evt.target.value;\n  }\n\n  executePlace(input) {\n    input = input.split(',');\n    if (input.length === 3) {\n      var direction = input[2].toLowerCase();\n      var x = parseInt(input[0]);\n      var y = parseInt(input[1]);\n      if (x >= 0 && x < BOARD_DIMENSION.cols) {\n        if (y >= 0 && y < BOARD_DIMENSION.rows) {\n          if (_.includes(ROBOT_DIRECTIONS, direction)) {\n            var state = {\n              location: {\n                x: x,\n                y: y\n              },\n              direction: direction\n            };\n            console.log(state);\n            this.setState(state);\n\n            return state;\n          }\n        }\n      }\n    }\n  }\n\n  place() {\n    this.executePlace(this.placeInput);\n  }\n\n  move(state) {\n    if (!state.location) {\n      state = this.state;\n    }\n    switch (state.direction) {\n      case ROBOT_DIRECTIONS.n:\n        state.location.y++;\n        if (state.location.y >= BOARD_DIMENSION.rows) {\n          state.location.y = BOARD_DIMENSION.rows - 1;\n        }\n        break;\n      case ROBOT_DIRECTIONS.s:\n        state.location.y--;\n        if (state.location.y < 0) {\n          state.location.y = 0;\n        }\n        break;\n      case ROBOT_DIRECTIONS.e:\n        state.location.x++;\n        if (state.location.x >= BOARD_DIMENSION.cols) {\n          state.location.x = BOARD_DIMENSION.cols - 1;\n        }\n        break;\n      case ROBOT_DIRECTIONS.w:\n        state.location.x--;\n        if (state.location.x < 0) {\n          state.location.x = 0;\n        }\n        break;\n    }\n\n    this.setState(state);\n\n    return state;\n  }\n\n  turnLeft(state) {\n    if (!state.location) {\n      state = this.state;\n    }\n    switch (state.direction) {\n      case ROBOT_DIRECTIONS.n:\n        state.direction = ROBOT_DIRECTIONS.w;\n        break;\n      case ROBOT_DIRECTIONS.s:\n        state.direction = ROBOT_DIRECTIONS.e;\n        break;\n      case ROBOT_DIRECTIONS.e:\n        state.direction = ROBOT_DIRECTIONS.n;\n        break;\n      case ROBOT_DIRECTIONS.w:\n        state.direction = ROBOT_DIRECTIONS.s;\n        break;\n    }\n\n    this.setState(state);\n\n    return state;\n  }\n\n  turnRight(state) {\n    if (!state.location) {\n      state = this.state;\n    }\n\n    switch (state.direction) {\n      case ROBOT_DIRECTIONS.n:\n        state.direction = ROBOT_DIRECTIONS.e;\n        break;\n      case ROBOT_DIRECTIONS.s:\n        state.direction = ROBOT_DIRECTIONS.w;\n        break;\n      case ROBOT_DIRECTIONS.e:\n        state.direction = ROBOT_DIRECTIONS.s;\n        break;\n      case ROBOT_DIRECTIONS.w:\n        state.direction = ROBOT_DIRECTIONS.n;\n        break;\n    }\n\n    this.setState(state);\n\n    return state;\n  }\n\n  render() {\n    console.log(this.state);\n    return (\n      <div className=\"toy-robot\">\n        <GameBoard\n          rows={BOARD_DIMENSION.rows}\n          cols={BOARD_DIMENSION.cols}\n          locationX={this.state.location.x}\n          locationY={this.state.location.y}\n          direction={this.state.direction}\n        />\n        <GameControls \n          moveFn={this.move} \n          turnRightFn={this.turnRight} \n          turnLeftFn={this.turnLeft} \n          reportFn={this.report} \n          placeFn={this.place}\n          placeInputFn={this.placeInputUpdate}\n          placeInput={this.placeInput}\n          batchCommandsFn={this.batchCommandsFn}\n          batchFn={this.batchFn}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}